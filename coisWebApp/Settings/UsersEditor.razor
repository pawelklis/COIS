@page "/usereditor"
@inject ProgramInstance cois

<input type="button" class="btn btn-success" @onclick="Add" value = "Dodaj" />
@if (objects.Count > 0)
{
    <table class="table">
    <thead class="bg-dark text-white sticky-top">
        <tr>
            @foreach (var p in objects.First().GetType().GetProperties())
            {
                @if (p.CustomAttributes.Where(x=>x.AttributeType.Name=="FrontEndAttribute").Count() > 0)
                {
                    FrontEndAttribute fa = (FrontEndAttribute)p.GetCustomAttributes(typeof(FrontEndAttribute), true).First();
                    @if (fa != null)
                    {
                        @if (fa.Show)
                        {
                            <th> @fa.Name </th>
                        }
                    }
                }
            }
            <th></th>
            <th></th>
        </tr>
    </thead>
    <tbody>
            @foreach (var o in objects)
            {
                <tr>
                    @foreach (var p in objects.First().GetType().GetProperties())
                    {
                        @if (p.CustomAttributes.Where(x=>x.AttributeType.Name=="FrontEndAttribute").Count() > 0)
                        {
                            FrontEndAttribute fa = (FrontEndAttribute)p.GetCustomAttributes(typeof(FrontEndAttribute), true).First();
                            @if (fa != null)
                            {
                                @if (fa.Show)
                                {
                                    <td> @p.GetValue(o) </td>
                                }
                            }
                        }
                    }
                    <td><input type="button" @onclick="()=>Select(o)" class="btn btn-secondary" value="Edytuj"></td>
                    <td><input type="button" @onclick="()=>{selectedObject=o;confirmDelete=true;}"class="btn btn-danger" value="Usuń"></td>
                </tr>

            }
    </tbody>
</table>
}


@if (showModal)
{
    <div class="modal" tabindex="-1" style="display:block;">
        <div class="modal-dialog" style="display:block;">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@selectedObject.Login</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="()=>showModal=false"></button>
                </div>
                <div class="modal-body" style="max-height:70vh;overflow:auto;">

                    <label>Login</label>
                    <input class="form-control" type="text" @bind="selectedObject.Login">

                    <label>Pracownik</label>
                    <select class="form-control" value="@selectedObject.Employee.Id" @onchange="ChangeEmployee">
                        @foreach (var z in EmployeeType.GetEmployees(cois.OrgUnit.Id))
                        {
                            <option value="@z.Id">
                                @z.FullName()
                            </option>
                        }                 
                    </select>


                    <label>Strefy</label>
                    <div style="max-height:250px;overflow:auto;">
                        @foreach (var z in ZoneType.GetZones())
                        {
                            <div class="activeLabel">
                                @if (selectedObject.Zones.Find(x => x.Id == z.Id) != null)
                                {                            
                                    <input type="checkbox" checked value="@z.Id" onclick="return false" >
                                }
                                else
                                {
                                    <input type="checkbox" value="@z.Id" onclick="return false" >
                                }
                                <label @onclick="()=>ChangeZone(z)" >@z.OrganizationUnit().Name @z.Name</label>

                            </div>
                        }
                    </div>
                    
                    <label>Uprawnienia</label>
                    <div style="max-height:250px;overflow:auto;">
                        @foreach (var z in PermissionType.PermissionSelects())
                        {
                            <div class="activeLabel">
                                @if (selectedObject.Permissions.Find(x => x.Permission == z.Item1) != null)
                                {                            
                                    @if(selectedObject.Permissions.Find(x => x.Permission == z.Item1).Access == true)
                                    {
                                        <input type="checkbox" checked value="@z.Item2" onclick="return false" >
                                    }
                                    else
                                    {
                                        <input type="checkbox" value="@z.Item2" onclick="return false" >
                                    }
                                }
                                else
                                {
                                    <input type="checkbox" value="@z.Item2" onclick="return false" >
                                }
                                <label @onclick="()=>ChangePermission(z.Item1)" >@z.Item2</label>

                            </div>
                        }
                    </div>

       
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="()=>showModal=false">Zamknij</button>
                    <button type="button" class="btn btn-primary" @onclick="Save">Zapisz</button>
                </div>
            </div>
        </div>
    </div>
}

@if (confirmDelete)
{
    <div class="modal" tabindex="-1" style="display:block;opacity:inherit;">
        <div class="modal-dialog" style="display:block;">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Usuwanie obiektu</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="()=>confirmDelete=false"></button>
                </div>
                <div class="modal-body" style="max-height:70vh;overflow:auto;">

                    <label>Czy potwierdzasz trwałe usunięcie obiektu?</label>
       
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="()=>confirmDelete=false">Anuluj</button>
                    <button type="button" class="btn btn-danger" @onclick="Delete">Usuń</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    bool showModal;
    bool confirmDelete;
    List<UserType> objects;
    UserType selectedObject;
    protected override void OnInitialized()
    {
        Refresh();   
        base.OnInitialized();
    }

    void Refresh()
    {
        objects = UserType.GetAllUsers();
        this.InvokeAsync(() => this.StateHasChanged());
    }

    void Add()
    {
        selectedObject = new UserType();
        showModal = true;
    }

    void Save()
    {
        selectedObject.Save();
        showModal = false;
        Refresh();
    }

    void Select(UserType o)
    {
        selectedObject = o;
        showModal = true;
    }

    void Delete()
    {
        selectedObject.Delete();
        Refresh();
        confirmDelete = false;
    }
    void ChangeZone(ZoneType z)
    {

        if (selectedObject.Zones.Find(x=>x.Id==z.Id)!=null)
        {
            for (int i = 0; i < selectedObject.Zones.Count; i++)
            {
                if (selectedObject.Zones[i].Id == z.Id)
                {
                    selectedObject.Zones.RemoveAt(i);
                    break;
                }
            }
        }
        else
        {
            selectedObject.Zones.Add(z);
        }
    }

    void ChangeEmployee(ChangeEventArgs e)
    {
        int id=int.Parse(e.Value.ToString());
        selectedObject.Employee = EmployeeType.GetEmployee(id);
    }

    void ChangePermission(PermissionType.PermissionList perm)
    {
        selectedObject.ChangePermission(perm);
    }
}

@page "/ReportModeleditor"
@inject ProgramInstance cois


@if (showItemEditor==false)
{

    <input type="button" class="btn btn-success" @onclick="Add" value="Dodaj" />
    @if (objects.Count > 0)
    {
        <table class="table table-hover table-sm">
            <thead class="bg-dark text-white sticky-top">
                <tr>
                    @foreach (var p in objects.First().GetType().GetProperties())
                    {
                        @if (p.CustomAttributes.Where(x => x.AttributeType.Name == "FrontEndAttribute").Count() > 0)
                        {
                            FrontEndAttribute fa = (FrontEndAttribute)p.GetCustomAttributes(typeof(FrontEndAttribute), true).First();
                            @if (fa != null)
                            {
                                @if (fa.Show)
                                {
                                    <th> @fa.Name </th>
                                }
                            }
                        }
                    }
                    <th></th>
                    <th></th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var o in objects)
                {
                    <tr>
                        @foreach (var p in objects.First().GetType().GetProperties())
                        {
                            @if (p.CustomAttributes.Where(x => x.AttributeType.Name == "FrontEndAttribute").Count() > 0)
                            {
                                FrontEndAttribute fa = (FrontEndAttribute)p.GetCustomAttributes(typeof(FrontEndAttribute), true).First();
                                @if (fa != null)
                                {
                                    @if (fa.Show)
                                    {
                                        <td> @p.GetValue(o) </td>
                                    }
                                }
                            }
                        }
                        <td><input type="button" @onclick="()=>Select(o)" class="btn btn-secondary" value="Edytuj"></td>
                        <td><input type="button" @onclick="()=>ShowItemEditor(o)" class="btn btn-secondary" value="Zakładki"></td>
                        <td><input type="button" @onclick="()=>{selectedObject=o;confirmDelete=true;}" class="btn btn-danger" value="Usuń"></td>
                    </tr>

                }
            </tbody>
        </table>
    }

    @if(showModal){
<div class="modal" tabindex="-1" style="display:block;">
    <div class="modal-dialog" style="display:block;">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@selectedObject.Name</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="()=>showModal=false"></button>
            </div>
            <div class="modal-body" style="max-height:70vh;overflow:auto;">

                <label>Nazwa</label>
                <input class="form-control" type="text" @bind="selectedObject.Name">

                <label>Opis</label>
                <input class="form-control" type="text" @bind="selectedObject.Description">
                <div>
                    <input type="checkbox" value="@selectedObject.HasCrew" checked="@selectedObject.HasCrew" @onchange="ChangeCrew" />
                    <label>Obsada</label>
                </div>
                <div>
                    <input type="checkbox" value="@selectedObject.HasDelegations" checked="@selectedObject.HasDelegations" @onchange="ChangeDel" />
                    <label>Delegowanie</label>
                </div>


                <label>Strefy</label>
                <div style="max-height:250px;overflow:auto;">
                    @foreach (var z in ZoneType.GetZones())
                    {
                        <div class="activeLabel">
                            @if (selectedObject.EnableZones.Find(x => x.Id == z.Id) != null)
                            {
                                <input type="checkbox" checked value="@z.Id" onclick="return false">
                            }
                            else
                            {
                                <input type="checkbox" value="@z.Id" onclick="return false">
                            }
                            <label @onclick="()=>ChangeZone(z)">@z.OrganizationUnit().Name @z.Name</label>

                        </div>
                    }
                </div>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="()=>showModal=false">Zamknij</button>
                <button type="button" class="btn btn-primary" @onclick="Save">Zapisz</button>
            </div>
        </div>
    </div>
</div>
}
@if(confirmDelete){
<div class="modal" tabindex="-1" style="display:block;opacity:inherit;">
    <div class="modal-dialog" style="display:block;">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Usuwanie obiektu</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="()=>confirmDelete=false"></button>
            </div>
            <div class="modal-body" style="max-height:70vh;overflow:auto;">

                <label>Czy potwierdzasz trwałe usunięcie obiektu?</label>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="()=>confirmDelete=false">Anuluj</button>
                <button type="button" class="btn btn-danger" @onclick="Delete">Usuń</button>
            </div>
        </div>
    </div>
</div>
    }


}
else
{
    <button type="button" class="btn-close"  aria-label="Close" @onclick="()=>showItemEditor=false"></button>
    <label>   Zakładki @selectedObject.Name</label> 
    <ReportModelItemEditor model=@selectedObject></ReportModelItemEditor>
}



@code {
    bool showModal;
    bool confirmDelete;
    List<ReportModel> objects;
    ReportModel selectedObject;
    protected override void OnInitialized()
    {
        Refresh();   
        base.OnInitialized();
    }

    void Refresh()
    {
        objects = ReportModel.GetReportModels(cois.OrgUnit.Id);
        this.InvokeAsync(() => this.StateHasChanged());
    }

    void Add()
    {
        selectedObject = new ReportModel();
        showModal = true;
    }

    void Save()
    {
        selectedObject.Save();
        showModal = false;
        Refresh();
    }

    void Select(ReportModel o)
    {
        selectedObject = o;
        showModal = true;
    }

    void Delete()
    {
        selectedObject.Delete();
        Refresh();
        confirmDelete = false;
    }

    void ChangeCrew(ChangeEventArgs e)
    {
        bool v = bool.Parse(e?.Value?.ToString());
        selectedObject.HasCrew = v;
    }
    void ChangeDel(ChangeEventArgs e)
    {
        bool v = bool.Parse(e?.Value?.ToString());
        selectedObject.HasDelegations = v;
    }

    void ChangeZone(ZoneType z)
    {

        if (selectedObject.EnableZones.Find(x=>x.Id==z.Id)!=null)
        {
            for (int i = 0; i < selectedObject.EnableZones.Count; i++)
            {
                if (selectedObject.EnableZones[i].Id == z.Id)
                {
                    selectedObject.EnableZones.RemoveAt(i);
                    break;
                }
            }
        }
        else
        {
            selectedObject.EnableZones.Add(z);
        }
    }


    bool showItemEditor;
    void ShowItemEditor(ReportModel o){
        selectedObject=o;
        showItemEditor=true;
    }

}
